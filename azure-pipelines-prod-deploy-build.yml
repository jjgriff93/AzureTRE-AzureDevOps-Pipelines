trigger: none

resources:
  pipelines:
  - pipeline: dev
    source: ouhtre_deployment
    branch: main

pool:
  vmImage: ubuntu-latest

stages:

  - stage: initialise_values
    jobs:
    - job: initialise_values
      displayName: Initialse variables
      variables:
        - group: PROD
      steps:
      - checkout: none
      - script: |
          base_name=prodcd
          tre_id="tre${base_name}"

          echo "##vso[task.setvariable variable=tre_id;isOutput=true]${tre_id}"
          echo "##vso[task.setvariable variable=mgmt_resource_group;isOutput=true]rg-${base_name}-mgmt"
          echo "##vso[task.setvariable variable=mgmt_storage_account;isOutput=true]sa${base_name}"
          echo "##vso[task.setvariable variable=mgmt_acr;isOutput=true]acr${base_name}"

        displayName: 'Generate env vars'
        name: set_env_values

  - stage: promote_attributes_to_prod
    dependsOn: initialise_values
    jobs:
    - job: promote_attributes_to_prod
      displayName: Promoting attributes to prod
      variables:
        - group: PROD
        - name: tre_id
          value: $[ stageDependencies.initialise_values.initialise_values.outputs['set_env_values.tre_id'] ]
        - name: mgmt_resource_group
          value: $[ stageDependencies.initialise_values.initialise_values.outputs['set_env_values.mgmt_resource_group'] ]
        - name: mgmt_storage_account
          value: $[ stageDependencies.initialise_values.initialise_values.outputs['set_env_values.mgmt_storage_account'] ]
        - name: mgmt_acr
          value: $[ stageDependencies.initialise_values.initialise_values.outputs['set_env_values.mgmt_acr'] ]

      steps:
      - checkout: none
      - script: |
          echo '== tre_id:               $(tre_id) =='
          echo '== mgmt_resource_group:  $(mgmt_resource_group) =='
          echo '== mgmt_storage_account: $(mgmt_storage_account) =='
          echo '== mgmt_acr:             $(mgmt_acr) =='
        displayName: Show variables

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'specific'
          project: '$(resources.pipeline.dev.projectID)'
          pipeline: '$(resources.pipeline.dev.pipelineID)'
          buildVersionToDownload: 'specific'
          runId: '$(resources.pipeline.dev.runID)'
          artifact: 'DEV_build'
          targetPath: '$(Agent.TempDirectory)'

      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: $(Agent.TempDirectory)/source.zip
          destinationFolder: $(Build.SourcesDirectory)/extract
          cleanDestinationFolder: true

  - stage: deploying_tre_in_prod
    dependsOn:
      - initialise_values
      - promote_attributes_to_prod
    jobs:
    - job: deploy_tre
      displayName: Deploy tre resources
      variables:
        - group: PROD
        - name: tre_id
          value: $[ stageDependencies.initialise_values.initialise_values.outputs['set_env_values.tre_id'] ]
        - name: mgmt_resource_group
          value: $[ stageDependencies.initialise_values.initialise_values.outputs['set_env_values.mgmt_resource_group'] ]
        - name: mgmt_storage_account
          value: $[ stageDependencies.initialise_values.initialise_values.outputs['set_env_values.mgmt_storage_account'] ]
        - name: mgmt_acr
          value: $[ stageDependencies.initialise_values.initialise_values.outputs['set_env_values.mgmt_acr'] ]

      steps:
      - checkout: none

      - script: |
          mkdir -p ~/.azure
        displayName: Fake dev container mounts

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'specific'
          project: '$(resources.pipeline.dev.projectID)'
          pipeline: '$(resources.pipeline.dev.pipelineID)'
          buildVersionToDownload: 'specific'
          runId: '$(resources.pipeline.dev.runID)'
          artifact: 'DEV_build'
          targetPath: '$(Agent.TempDirectory)'

      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: $(Agent.TempDirectory)/source.zip
          destinationFolder: $(Build.SourcesDirectory)/extract
          cleanDestinationFolder: true

      - script: |
          set -e

          echo "Sign in to az"
          az login --service-principal --user "$(ARM_CLIENT_ID)" --password "$(ARM_CLIENT_SECRET)" --tenant "$(ARM_TENANT_ID)"

          echo "Set subscription"
          az account set --subscription "$(ARM_SUBSCRIPTION_ID)"

          echo "Check if RG exists"
          rg_exists=$(az group exists --name $(mgmt_resource_group))

          if [[ "$rg_exists" = 'true' ]]; then
            echo "Resource group ($(mgmt_resource_group)) exists"
          else
            echo "Resource group ($(mgmt_resource_group)) doesn't exist yet. Creating..."
            az group create -l uksouth -n $(mgmt_resource_group)
          fi

          echo "Check if ACR exists"
          acr_exists=$(az acr show --resource-group $(mgmt_resource_group) --name $(mgmt_acr) > /dev/null 2>&1 ; echo $?)
          if [[ "$acr_exists" == 0 ]]; then
            echo "Log in to ACR ($(mgmt_acr))"
            az acr login --name $(mgmt_acr)
          else
            echo "ACR doesn't exist. Creating..."
            az acr create --resource-group $(mgmt_resource_group) --name $(mgmt_acr) --sku Standard
          fi
        displayName: Create resources in portal

      - task: DevcontainersCi@0
        displayName: Run bootstrap
        inputs:
          imageName: $(mgmt_acr).azurecr.io/ouhtre-deployment-devcontainer
          subFolder: extract
          # skip image push here as ACR may not yet exist
          push: never
          runCmd: make bootstrap mgmt-deploy
          env: |
            ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            ARM_TENANT_ID=$(ARM_TENANT_ID)
            AAD_TENANT_ID=$(ARM_TENANT_ID)
            LOCATION=uksouth
            TF_VAR_location=uksouth
            TF_VAR_mgmt_resource_group_name=$(mgmt_resource_group)
            TF_VAR_mgmt_storage_account_name=$(mgmt_storage_account)
            TF_VAR_acr_name=$(mgmt_acr)
            TF_VAR_terraform_state_container_name=tfstate
            DEBUG="false"
            TRE_ID=$(tre_id)
            USE_ENV_VARS_NOT_FILES=true
            TF_IN_AUTOMATION=true

      - script: |
          set -e

          success=false

          for i in {1..3}
          do
            az acr login --name $(mgmt_acr) && success=true && break || sleep 30
          done;

          if [[ "$success" == "true" ]]; then
            echo "Push dev container image"
            docker push $(mgmt_acr).azurecr.io/ouhtre-deployment-devcontainer
          else
            echo "Failed!" && exit 1
          fi
        displayName: Authenticate with ACR and push dev container image

      - task: DevcontainersCi@0
        displayName: Promote container images
        inputs:
          imageName: $(mgmt_acr).azurecr.io/ouhtre-deployment-devcontainer
          subFolder: extract
          # skip image push here as ACR may not yet exist
          push: never
          runCmd: |
            ./devops/scripts/copy_images.sh $(mgmt_acr)
          env: |
            ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            ARM_TENANT_ID=$(ARM_TENANT_ID)
            AAD_TENANT_ID=$(ARM_TENANT_ID)
            DEV_CICD_ARM_CLIENT_ID=$(DEV_CICD_ARM_CLIENT_ID)
            DEV_CICD_ARM_CLIENT_SECRET=$(DEV_CICD_ARM_CLIENT_SECRET)
            LOCATION=uksouth
            TF_VAR_location=uksouth
            TF_VAR_mgmt_resource_group_name=$(mgmt_resource_group)
            TF_VAR_mgmt_storage_account_name=$(mgmt_storage_account)
            TF_VAR_acr_name=$(mgmt_acr)
            TF_VAR_terraform_state_container_name=tfstate
            DEBUG="false"
            TRE_ID=$(tre_id)
            USE_ENV_VARS_NOT_FILES=true
            TF_IN_AUTOMATION=true

      - task: DevcontainersCi@0
        displayName:  Deploy TRE
        inputs:
          imageName: $(mgmt_acr).azurecr.io/ouhtre-deployment-devcontainer
          subFolder: extract
          # skip image push here as ACR may not yet exist
          push: never
          runCmd: make deploy-core build-and-deploy-ui-wrapped
          env: |
              ARM_CLIENT_ID=$(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
              ARM_TENANT_ID=$(ARM_TENANT_ID)
              AAD_TENANT_ID=$(ARM_TENANT_ID)
              LOCATION=uksouth
              TF_VAR_arm_client_id=$(ARM_CLIENT_ID)
              TF_VAR_arm_client_secret=$(ARM_CLIENT_SECRET)
              TF_VAR_arm_subscription_id=$(ARM_SUBSCRIPTION_ID)
              TF_VAR_arm_tenant_id=$(ARM_TENANT_ID)
              TF_VAR_aad_tenant_id=$(ARM_TENANT_ID)
              TF_VAR_location=uksouth
              TF_VAR_mgmt_resource_group_name=$(mgmt_resource_group)
              TF_VAR_mgmt_storage_account_name=$(mgmt_storage_account)
              TF_VAR_acr_name=$(mgmt_acr)
              TF_VAR_terraform_state_container_name=tfstate
              TF_VAR_api_client_id=$(API_CLIENT_ID)
              TF_VAR_api_client_secret=$(API_CLIENT_SECRET)
              TF_VAR_application_admin_client_id=$(APPLICATION_ADMIN_CLIENT_ID)
              TF_VAR_application_admin_client_secret=$(APPLICATION_ADMIN_CLIENT_SECRET)
              TF_VAR_core_address_space=$(CORE_ADDRESS_SPACE)
              TF_VAR_tre_address_space=$(TRE_ADDRESS_SPACE)
              TF_VAR_resource_processor_type=$(RESOURCE_PROCESSOR_TYPE)
              TF_VAR_api_app_service_plan_sku_size=$(API_APP_SERVICE_PLAN_SKU_SIZE)
              TF_VAR_enable_airlock_malware_scanning=$(ENABLE_AIRLOCK_MALWARE_SCANNING)
              TF_VAR_swagger_ui_client_id=$(SWAGGER_UI_CLIENT_ID)
              TF_VAR_tre_id=$(tre_id)
              TF_VAR_ci_git_ref=$(Build.SourceBranch)
              TF_VAR_rp_bundle_values={"image_gallery_id":"$(IMAGE_GALLERY_ID)"}
              DEBUG="false"
              TRE_ID=$(tre_id)
              USE_ENV_VARS_NOT_FILES=true
              TF_IN_AUTOMATION=true
              ACR_NAME=$(MGMT_ACR)
              CI_CACHE_ACR_NAME=$(ci_cache_acr_name)
              DEPLOY_UI=true
              SWAGGER_UI_CLIENT_ID=$(SWAGGER_UI_CLIENT_ID)
              API_CLIENT_ID=$(API_CLIENT_ID)
              API_CLIENT_SECRET=$(API_CLIENT_SECRET)
              LETSENCRYPT_DROP_ALL_RULES=1
          # LETSENCRYPT_DROP_ALL_RULES=1 to drop all rules on web storage account
          # (see AzureTRE/templates/core/terraform/scripts/letsencrypt.sh for more info)

      - task: Cache@2
        # cache letsencrypt folder to avoid re-requesting certs every time
        inputs:
          key: '"letsencrypt-$(Build.SourceBranch)"'
          path: extract/letsencrypt

      - task: DevcontainersCi@0
        displayName:  Run letsencrypt
        inputs:
          imageName: $(mgmt_acr).azurecr.io/ouhtre-deployment-devcontainer
          subFolder: extract
          # skip image push here as ACR may not yet exist
          push: never
          runCmd: make letsencrypt
          env: |
            ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            ARM_TENANT_ID=$(ARM_TENANT_ID)
            AAD_TENANT_ID=$(ARM_TENANT_ID)
            LOCATION=uksouth
            TF_VAR_arm_client_id=$(ARM_CLIENT_ID)
            TF_VAR_arm_client_secret=$(ARM_CLIENT_SECRET)
            TF_VAR_arm_subscription_id=$(ARM_SUBSCRIPTION_ID)
            TF_VAR_arm_tenant_id=$(ARM_TENANT_ID)
            TF_VAR_aad_tenant_id=$(ARM_TENANT_ID)
            TF_VAR_location=uksouth
            TF_VAR_mgmt_resource_group_name=$(mgmt_resource_group)
            TF_VAR_mgmt_storage_account_name=$(mgmt_storage_account)
            TF_VAR_acr_name=$(mgmt_acr)
            TF_VAR_terraform_state_container_name=tfstate
            TF_VAR_api_client_id=$(API_CLIENT_ID)
            TF_VAR_api_client_secret=$(API_CLIENT_SECRET)
            TF_VAR_application_admin_client_id=$(APPLICATION_ADMIN_CLIENT_ID)
            TF_VAR_application_admin_client_secret=$(APPLICATION_ADMIN_CLIENT_SECRET)
            TF_VAR_core_address_space=$(CORE_ADDRESS_SPACE)
            TF_VAR_tre_address_space=$(TRE_ADDRESS_SPACE)
            TF_VAR_resource_processor_type=$(RESOURCE_PROCESSOR_TYPE)
            TF_VAR_api_app_service_plan_sku_size=$(API_APP_SERVICE_PLAN_SKU_SIZE)
            TF_VAR_enable_airlock_malware_scanning=$(ENABLE_AIRLOCK_MALWARE_SCANNING)
            TF_VAR_swagger_ui_client_id=$(SWAGGER_UI_CLIENT_ID)
            TF_VAR_tre_id=$(tre_id)
            DEBUG="false"
            TRE_ID=$(tre_id)
            USE_ENV_VARS_NOT_FILES=true
            TF_IN_AUTOMATION=true
            ACR_NAME=$(MGMT_ACR)
            CI_CACHE_ACR_NAME=$(ci_cache_acr_name)
            TF_VAR_ci_git_ref=$(Build.SourceBranch)
            LETSENCRYPT_DROP_ALL_RULES=1
        # LETSENCRYPT_DROP_ALL_RULES=1 to drop all rules on web storage account
        # (see AzureTRE/templates/core/terraform/scripts/letsencrypt.sh for more info)


      - task: DevcontainersCi@0
        displayName: Register bundles
        inputs:
          imageName: $(mgmt_acr).azurecr.io/ouhtre-deployment-devcontainer
          subFolder: extract
          # skip image push here as already pushed in bootstrap job
          push: never
          runCmd: |
            make bundle-register DIR="/workspaces/ouhtre_deployment/AzureTRE/templates/workspaces/base" BUNDLE_TYPE=workspace
            make bundle-register DIR="/workspaces/ouhtre_deployment/AzureTRE/templates/workspaces/airlock-import-review" BUNDLE_TYPE=workspace
            make bundle-register DIR="/workspaces/ouhtre_deployment/AzureTRE/templates/workspace_services/guacamole" BUNDLE_TYPE=workspace_service
            make bundle-register DIR="/workspaces/ouhtre_deployment/AzureTRE/templates/workspace_services/azureml" BUNDLE_TYPE=workspace_service
            make bundle-register DIR="/workspaces/ouhtre_deployment/AzureTRE/templates/workspace_services/innereye" BUNDLE_TYPE=workspace_service
            make bundle-register DIR="/workspaces/ouhtre_deployment/AzureTRE/templates/workspace_services/gitea" BUNDLE_TYPE=workspace_service
            make bundle-register DIR="/workspaces/ouhtre_deployment/AzureTRE/templates/workspace_services/mlflow" BUNDLE_TYPE=workspace_service
          env: |
            ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            ARM_TENANT_ID=$(ARM_TENANT_ID)
            AAD_TENANT_ID=$(ARM_TENANT_ID)
            LOCATION=uksouth
            TF_VAR_location=uksouth
            TF_VAR_mgmt_resource_group_name=$(mgmt_resource_group)
            TF_VAR_mgmt_storage_account_name=$(mgmt_storage_account)
            TF_VAR_acr_name=$(mgmt_acr)
            TF_VAR_terraform_state_container_name=tfstate
            DEBUG="false"
            TRE_ID=$(tre_id)
            USE_ENV_VARS_NOT_FILES=true
            TF_IN_AUTOMATION=true
            ACR_NAME=$(MGMT_ACR)
            API_CLIENT_ID=$(API_CLIENT_ID)
            TEST_ACCOUNT_CLIENT_ID=$(TEST_ACCOUNT_CLIENT_ID)
            TEST_ACCOUNT_CLIENT_SECRET=$(TEST_ACCOUNT_CLIENT_SECRET)
            CI_CACHE_ACR_NAME=$(ci_cache_acr_name)

      - task: DevcontainersCi@0
        displayName: Register shared bundles
        inputs:
          imageName: $(mgmt_acr).azurecr.io/ouhtre-deployment-devcontainer
          subFolder: extract
          # skip image push here as already pushed in bootstrap job
          push: never
          runCmd: |
              make bundle-register DIR="./AzureTRE/templates/shared_services/certs" BUNDLE_TYPE=shared_service
              make bundle-register DIR="./AzureTRE/templates/shared_services/firewall" BUNDLE_TYPE=shared_service
              make bundle-register DIR="./AzureTRE/templates/shared_services/sonatype-nexus-vm" BUNDLE_TYPE=shared_service
              make bundle-register DIR="./AzureTRE/templates/shared_services/gitea" BUNDLE_TYPE=shared_service
          env: |
            ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            ARM_TENANT_ID=$(ARM_TENANT_ID)
            AAD_TENANT_ID=$(ARM_TENANT_ID)
            LOCATION=uksouth
            TF_VAR_location=uksouth
            TF_VAR_mgmt_resource_group_name=$(mgmt_resource_group)
            TF_VAR_mgmt_storage_account_name=$(mgmt_storage_account)
            TF_VAR_acr_name=$(mgmt_acr)
            TF_VAR_terraform_state_container_name=tfstate
            DEBUG="false"
            TRE_ID=$(tre_id)
            USE_ENV_VARS_NOT_FILES=true
            TF_IN_AUTOMATION=true
            ACR_NAME=$(MGMT_ACR)
            API_CLIENT_ID=$(API_CLIENT_ID)
            TEST_ACCOUNT_CLIENT_ID=$(TEST_ACCOUNT_CLIENT_ID)
            TEST_ACCOUNT_CLIENT_SECRET=$(TEST_ACCOUNT_CLIENT_SECRET)
            CI_CACHE_ACR_NAME=$(ci_cache_acr_name)


      - task: DevcontainersCi@0
        displayName: Register user-resource bundles
        inputs:
          imageName: $(mgmt_acr).azurecr.io/ouhtre-deployment-devcontainer
          subFolder: extract
          # skip image push here as already pushed in bootstrap job
          push: never
          runCmd: |
              make bundle-register DIR="./templates/workspace_services/guacamole/user_resources/guacamole-azure-windowsvm-ouh" BUNDLE_TYPE=user_resource WORKSPACE_SERVICE_NAME="tre-service-guacamole"
              make bundle-register DIR="./templates/workspace_services/guacamole/user_resources/guacamole-azure-linuxvm-ouh" BUNDLE_TYPE=user_resource WORKSPACE_SERVICE_NAME="tre-service-guacamole"
              make bundle-register DIR="./AzureTRE/templates/workspace_services/guacamole/user_resources/guacamole-azure-import-reviewvm" BUNDLE_TYPE=user_resource WORKSPACE_SERVICE_NAME="tre-service-guacamole"
              make bundle-register DIR="./AzureTRE/templates/workspace_services/guacamole/user_resources/guacamole-azure-export-reviewvm" BUNDLE_TYPE=user_resource WORKSPACE_SERVICE_NAME="tre-service-guacamole"
          env: |
            ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            ARM_TENANT_ID=$(ARM_TENANT_ID)
            AAD_TENANT_ID=$(ARM_TENANT_ID)
            LOCATION=uksouth
            TF_VAR_location=uksouth
            TF_VAR_mgmt_resource_group_name=$(mgmt_resource_group)
            TF_VAR_mgmt_storage_account_name=$(mgmt_storage_account)
            TF_VAR_acr_name=$(mgmt_acr)
            TF_VAR_terraform_state_container_name=tfstate
            DEBUG="false"
            TRE_ID=$(tre_id)
            USE_ENV_VARS_NOT_FILES=true
            TF_IN_AUTOMATION=true
            ACR_NAME=$(MGMT_ACR)
            API_CLIENT_ID=$(API_CLIENT_ID)
            TEST_ACCOUNT_CLIENT_ID=$(TEST_ACCOUNT_CLIENT_ID)
            TEST_ACCOUNT_CLIENT_SECRET=$(TEST_ACCOUNT_CLIENT_SECRET)
            CI_CACHE_ACR_NAME=$(ci_cache_acr_name)

      - task: DevcontainersCi@0
        displayName: Deploy certs shared service
        inputs:
          imageName: $(mgmt_acr).azurecr.io/ouhtre-deployment-devcontainer
          subFolder: extract
          # skip image push here as already pushed in bootstrap job
          push: never
          runCmd: |
              make deploy-shared-service DIR=./AzureTRE/templates/shared_services/certs/ BUNDLE_TYPE=shared_service PROPS="--domain_prefix nexus --cert_name nexus-ssl"
          env: |
            ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            ARM_TENANT_ID=$(ARM_TENANT_ID)
            AAD_TENANT_ID=$(ARM_TENANT_ID)
            LOCATION=uksouth
            TF_VAR_location=uksouth
            TF_VAR_mgmt_resource_group_name=$(mgmt_resource_group)
            TF_VAR_mgmt_storage_account_name=$(mgmt_storage_account)
            TF_VAR_acr_name=$(mgmt_acr)
            TF_VAR_terraform_state_container_name=tfstate
            DEBUG="false"
            TRE_ID=$(tre_id)
            USE_ENV_VARS_NOT_FILES=true
            TF_IN_AUTOMATION=true
            ACR_NAME=$(MGMT_ACR)
            API_CLIENT_ID=$(API_CLIENT_ID)
            TEST_ACCOUNT_CLIENT_ID=$(TEST_ACCOUNT_CLIENT_ID)
            TEST_ACCOUNT_CLIENT_SECRET=$(TEST_ACCOUNT_CLIENT_SECRET)
            CI_CACHE_ACR_NAME=$(ci_cache_acr_name)


      - task: DevcontainersCi@0
        displayName: Deploy firewall shared service
        inputs:
          imageName: $(mgmt_acr).azurecr.io/ouhtre-deployment-devcontainer
          subFolder: extract
          # skip image push here as already pushed in bootstrap job
          push: never
          runCmd: |
              make deploy-shared-service DIR=./AzureTRE/templates/shared_services/firewall/ BUNDLE_TYPE=shared_service
          env: |
            ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            ARM_TENANT_ID=$(ARM_TENANT_ID)
            AAD_TENANT_ID=$(ARM_TENANT_ID)
            LOCATION=uksouth
            TF_VAR_location=uksouth
            TF_VAR_mgmt_resource_group_name=$(mgmt_resource_group)
            TF_VAR_mgmt_storage_account_name=$(mgmt_storage_account)
            TF_VAR_acr_name=$(mgmt_acr)
            TF_VAR_terraform_state_container_name=tfstate
            DEBUG="false"
            TRE_ID=$(tre_id)
            USE_ENV_VARS_NOT_FILES=true
            TF_IN_AUTOMATION=true
            ACR_NAME=$(MGMT_ACR)
            API_CLIENT_ID=$(API_CLIENT_ID)
            TEST_ACCOUNT_CLIENT_ID=$(TEST_ACCOUNT_CLIENT_ID)
            TEST_ACCOUNT_CLIENT_SECRET=$(TEST_ACCOUNT_CLIENT_SECRET)
            CI_CACHE_ACR_NAME=$(ci_cache_acr_name)


      - task: DevcontainersCi@0
        displayName: Deploy nexus shared service
        inputs:
          imageName: $(mgmt_acr).azurecr.io/ouhtre-deployment-devcontainer
          subFolder: extract
          # skip image push here as already pushed in bootstrap job
          push: never
          runCmd: |
              make deploy-shared-service DIR=./AzureTRE/templates/shared_services/sonatype-nexus-vm/ BUNDLE_TYPE=shared_service PROPS="--ssl_cert_name nexus-ssl"
          env: |
            ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            ARM_TENANT_ID=$(ARM_TENANT_ID)
            AAD_TENANT_ID=$(ARM_TENANT_ID)
            LOCATION=uksouth
            TF_VAR_location=uksouth
            TF_VAR_mgmt_resource_group_name=$(mgmt_resource_group)
            TF_VAR_mgmt_storage_account_name=$(mgmt_storage_account)
            TF_VAR_acr_name=$(mgmt_acr)
            TF_VAR_terraform_state_container_name=tfstate
            DEBUG="false"
            TRE_ID=$(tre_id)
            USE_ENV_VARS_NOT_FILES=true
            TF_IN_AUTOMATION=true
            ACR_NAME=$(MGMT_ACR)
            API_CLIENT_ID=$(API_CLIENT_ID)
            TEST_ACCOUNT_CLIENT_ID=$(TEST_ACCOUNT_CLIENT_ID)
            TEST_ACCOUNT_CLIENT_SECRET=$(TEST_ACCOUNT_CLIENT_SECRET)
            CI_CACHE_ACR_NAME=$(ci_cache_acr_name)



      - task: DevcontainersCi@0
        displayName: State Store Migrations
        inputs:
          imageName: $(mgmt_acr).azurecr.io/ouhtre-deployment-devcontainer
          subFolder: extract
          # skip image push here as already pushed in bootstrap job
          push: never
          runCmd: make db-migrate
          env: |
            ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            ARM_TENANT_ID=$(ARM_TENANT_ID)
            AAD_TENANT_ID=$(ARM_TENANT_ID)
            LOCATION=uksouth
            TF_VAR_location=uksouth
            TF_VAR_mgmt_resource_group_name=$(mgmt_resource_group)
            TF_VAR_mgmt_storage_account_name=$(mgmt_storage_account)
            TF_VAR_acr_name=$(mgmt_acr)
            TF_VAR_terraform_state_container_name=tfstate
            DEBUG="false"
            USE_ENV_VARS_NOT_FILES=true
            TF_IN_AUTOMATION=true
            ACR_NAME=$(MGMT_ACR)
            TRE_ID=$(tre_id)
            USE_ENV_VARS_NOT_FILES=true
            TF_IN_AUTOMATION=true
            ACR_NAME=$(MGMT_ACR)
            CI_CACHE_ACR_NAME=$(ci_cache_acr_name)
            API_CLIENT_ID=$(API_CLIENT_ID)
            TEST_ACCOUNT_CLIENT_ID=$(TEST_ACCOUNT_CLIENT_ID)
            TEST_ACCOUNT_CLIENT_SECRET=$(TEST_ACCOUNT_CLIENT_SECRET)
            TF_VAR_core_address_space=$(CORE_ADDRESS_SPACE)
            TF_VAR_tre_address_space=$(TRE_ADDRESS_SPACE)
            TF_VAR_swagger_ui_client_id=$(SWAGGER_UI_CLIENT_ID)
            TF_VAR_api_client_id=$(API_CLIENT_ID)
            TF_VAR_api_client_secret=$(API_CLIENT_SECRET)


## TODO add nexus shared service (here + DEV)
